{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to foamMooring","text":"<p>A mooring restraints package for simulating rigid body motions in OpenFOAM</p> <p> Consider starring the repository if you find it useful. </p> <p>Note</p> <p>UNDER CONSTRUCTION!</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Works for two rigid body motion libraries <code>sixDoFRigidBodyMotion</code> and <code>rigidBodyMotion</code></li> <li>Mooring models of restraints include MAP++, MoorDyn, Moody, groups of linear springs</li> <li>Most restraints support runtime generation of legacy VTK files (including vtk.series)</li> <li>No need to change and re-compile of built-in motion libraries and flow solvers</li> <li>Tested on v2012, v2212, v2306, mostly with overset grid solver <code>overInterDyMFoam</code></li> <li>Should also work with <code>interFoam</code> (deforming mesh) and other variants <code>waveFoam</code> and <code>olaFlow</code></li> </ul>"},{"location":"#code-structure","title":"Code structure","text":"<p>Three mooring analysis codes, a quasi-static mooring model MAP++ (Masciola et al., 2013), a lumped-mass mooring model MoorDyn (Hall and Goupee, 2015), and a finite element model Moody (Palm et al., 2017), are coupled with OpenFOAM\u2019s two rigid body motion solvers by developing three corresponding rigid body motion restraints.</p> <ul> <li>Both MAP++ and MoorDyn are open-source, with the latter under continuous developments. </li> <li>Moody is an in-house code but a precompiled library is released for coupling with other codes.</li> <li>A rewrite of <code>linearSpring</code>, <code>linearSpringGroup</code> simplifies definition of a group of identical springs and enables runtime generation of tension &amp; VTK files.</li> </ul> Mooring Model sixDoFMooring rigidBodyMooring MAP++ map3R map3R MoorDyn v1 moorDynR1 moorDynR1 MoorDyn v2 moorDynR2 moorDynR2 Moody moodyR moodyR linearSpring linearSpringGroup linearSpringGroup"},{"location":"#main-features-of-map-moordyn-moody","title":"Main features of MAP++, MoorDyn, Moody","text":"<p>The Mooring Analysis Program (MAP++) is an open-source project developed by the National Renewable Energy Laboratory (NREL). The multisegmented, quasi-static mooring model was developed based on an extension of conventional single line catenary solutions, allowing multielement mooring systems with arbitrary connection configurations to be analyzed. </p> <p>MoorDyn is a lumped-mass mooring analysis library. Each mooring line is discretized into a number of equal-length segments, each segment connecting two neighboring nodes. All the line mass and external forces acting on the line, including buoyancy, seabed contact force, and hydrodynamic drag and inertia forces based on Morison\u2019s equation, are lumped at a finite number of nodes. Massless springs are conceived to connect the adjacent nodes representing the internal tension and damping forces. </p> <p>Moody is a finite element mooring dynamics model developed with the special intent of capturing and resolving snap loads. It uses an hp-adaptive discontinuous Galerkin method; the high-order formulation makes engineering accuracy achievable using only a few high order elements. Unlike the lumped-mass formulation, this model is derived first and foremost from the governing equations of motion for an elastic cable.</p> <p></p> <p>Note</p> <p>Both MoorDyn v2 and Moody now seem to support bending stiffness formulations.</p>"},{"location":"#citations","title":"Citations","text":"<ul> <li>Chen, H., &amp; Hall, M. (2022). CFD simulation of floating body motion with mooring dynamics: Coupling MoorDyn with OpenFOAM, Applied Ocean Research, 124, 103210. https://doi.org/10.1016/j.apor.2022.103210</li> <li>Chen, H., Medina, T. A., &amp; Cercos-Pita, J. L. CFD simulation of multiple moored floating structures using OpenFOAM: An open-access mooring restraints library. preprint at http://dx.doi.org/10.13140/RG.2.2.34206.10569</li> </ul>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This offering is not approved or endorsed by OpenCFD Limited, producer and distributor of the OpenFOAM software via www.openfoam.com, and owner of the OPENFOAM\u00ae and OpenCFD\u00ae trade marks. This offering is not approved or endorsed by any software packages mentioned above or their respective owners, and should not be considered as such.</p> <p>OpenFOAM is a free, open source CFD software released and developed by OpenCFD Ltd since 2004. It has a large user base across most areas of engineering and science, from both commercial and academic organisations. See documentation</p>"},{"location":"gallery/","title":"Gallery","text":"<p>Dynamic mooring restraints for rigid body motion in OpenFOAM</p>"},{"location":"gallery/#prospective-applications","title":"Prospective applications","text":"<ul> <li>Floating Offshore Wind Turbine, wind farm</li> <li>Wave Energy Converter, WEC arrays</li> <li>Multiple individually moored floating bodies</li> <li>Multiple floating bodies with shared moorings</li> <li>Towed-system dynamics</li> </ul>"},{"location":"gallery/#an-individually-moored-twin-floating-breakwater","title":"An individually moored twin floating breakwater","text":""},{"location":"gallery/#a-twin-floating-breakwater-with-shared-moorings","title":"A twin floating breakwater with shared moorings","text":""},{"location":"gallery/#a-towed-subsurface-object","title":"A towed subsurface object","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>git, to clone foamMooring and submodules (MoorDyn v1 &amp; v2).</li> <li>Make, to compile MoorDyn and MAP++.</li> <li>CMake, to help compile MoorDyn v2.</li> <li>VTK if USE_VTK=ON when compiling MoorDyn v2. </li> <li>lapacke, required by MAP++.</li> </ul> <pre><code>$ sudo apt install liblapack3\n$ sudo apt install liblapack-dev liblapacke-dev\n</code></pre>"},{"location":"installation/#compile-foammooring","title":"Compile foamMooring","text":"<ul> <li>Clone the repo in <code>$WM_PROJECT_USER_DIR</code>.</li> </ul> <pre><code>mkdir -p $WM_PROJECT_USER_DIR \ncd $WM_PROJECT_USER_DIR \ngit clone https://gitlab.com/hfchen20/foamMooring.git \ncd foamMooring \n</code></pre> <ul> <li>Run <code>Allwmake</code>. Upon successful compilation, there should be at least two libraries, <code>libsixDoFMooring.so</code> and <code>librigidBodyMooring.so</code>, in <code>$FOAM_USER_LIBBIN</code>.</li> </ul> <pre><code>./Allwmake\n</code></pre> <ul> <li>You can selectively compile part of the library. If there is difficulty in compiling MAP++ and map3R (quasi-static mooring code),  you could skip compiling MAP++ in <code>Allwmake</code> and remove/comment out the corresponding entries in the Make files.</li> </ul> <p>For `Make/files``, remove</p> <pre><code>map3R/mapFoamInterface.C\nmap3R/map3R.C\n</code></pre> <p>For `Make/options``, remove</p> <pre><code>-llapacke \\\n-lmap-1.30.00 \\\n</code></pre>"},{"location":"mesh_motion/","title":"Dynamic mesh motion","text":"<p>Two mesh motion methods may be applied to accommodate the floating boy motion in the CFD computational domain. The body motion may be solved by either of the two rigid body motion libraries <code>sixDoFRigidBodyMotion</code> and <code>rigidBodyMotion</code>.</p> Settings Deforming Mesh Overset Mesh flow sovler interFoam overInterDyMFoam dynamicFvMesh dynamicMotionSolverFvMesh dynamicOversetFvMesh six-DoF mooring sixDoFRigidBodyMotion sixDoFRigidBodyMotion rgb mooring rigidBodyMotion rigidBodyMotion <p>The mesh deformation or mesh morphing technique is the classical method to accommodate body motion in the computational domain without topological changes. It is suitable for small amplitude body motions, as large motions (translation or rotation) may continuously squeeze and stretch the computational cells, resulting in deteriorated mesh quality and thus adversely affecting simulation results.</p> <p>The overset mesh method is particularly suitable for applications involving large-amplitude body motions and multiple moving bodies. Two sets of grids are defined in this method: a relatively large background grid and a set of local overset grids each enclosing one of the moving bodies. A composite computational domain is then generated via cell-to-cell mappings between the two sets of disconnected grids, which overlap each other. The background grid is mostly stationary, while the overset grid moves following the body motion, prescribed in advance or calculated using the two rigid body motion libraries in OpenFOAM.</p> <p> </p>"},{"location":"references/","title":"References","text":"<ul> <li>Chen, H., &amp; Hall, M. (2022). CFD simulation of floating body motion with mooring dynamics: Coupling MoorDyn with OpenFOAM, Applied Ocean Research, 124, 103210. https://doi.org/10.1016/j.apor.2022.103210</li> <li>Chen, H., Medina, T. A., &amp; Cercos-Pita, J. L. CFD simulation of multiple moored floating structures using OpenFOAM: An open-access mooring restraints library. preprint at http://dx.doi.org/10.13140/RG.2.2.34206.10569</li> </ul> <p>Note</p> <p>Refer to the two papers above for other references mentioned in this website.</p>"},{"location":"rgb-mooring/","title":"rigidBodyMooring","text":""},{"location":"rgb-mooring/#overview","title":"Overview","text":"<p>The mooring restraint <code>librigidBodyMooring.so</code> enhances the native rigid body motion library <code>rigidBodyMotion</code>, which solves multi-body dynamics using the articulated-body algorithm (Featherstone, 2014). The restraint library can be simply loaded at runtime into the built-in OpenFOAM solvers <code>interFoam</code> and <code>overInterDyMFoam</code>, or into other variants (such as <code>waveFoam</code> and <code>olaFlow</code>) developed by the community. </p> <p>While the built-in six-DoF motions solver calculates the body motion one by one, this multibody dynamics solver calculates the motion responses of all bodies together. This algorithm is inherently applicable to simulations of interconnected bodies and multiple hinged bodies.</p> <ul> <li>After the hydrodynamic forces/moments acting on all the bodies are calculated, the reacting forces/moments by all restraints are added up to the body each of the restraint is attached to. </li> <li>The forward dynamics algorithm then calculates the joint acceleration from the joints state and forces. </li> <li>The joints velocity and position are then integrated using the Newmark-\u03b2 scheme. </li> <li>The bodies state is finally updated to correspond to the current joints state. </li> </ul>"},{"location":"rgb-mooring/#coupling-mode-for-interconnected-bodies","title":"Coupling mode for interconnected bodies","text":"<p>For the <code>rigidBodyMotion</code> restraints, only the point coupling mode is valid as the mooring restraining moments requested by the multibody dynamics formulation should be in global coordinate system. Multiple bodies interconnected with shared moorings or hinges can be simulated.</p> <ul> <li>map3R</li> <li>moorDynR1, moorDynR2</li> <li>moodyR</li> <li>linearSpringGroup</li> </ul>"},{"location":"rgb-mooring/#how-to-use-rigidbodymooring","title":"How to use rigidBodyMooring","text":"<ul> <li> <p>Prepare an OpenFOAM case as usual. The floating body motion can be accommodated by either deforming mesh <code>interFoam</code> or overset grid <code>overInterDyMFoam</code>.</p> </li> <li> <p>Add in <code>controlDict</code></p> </li> </ul> <pre><code>libs    (rigidBodyMooring); \n</code></pre> <ul> <li> <p>Prepare a mooring input file in case subfolder \"Mooring\". </p> </li> <li> <p>Define mooring restraints in <code>constant/dynamicMeshDict</code>. Add one of <code>moorDynR1 || moorDynR2 || map3R || moodyR || linearSpringGroup</code>.</p> </li> </ul>"},{"location":"rgb-mooring/#moordynr1-moordynr2","title":"moorDynR1 &amp; moorDynR2","text":"<pre><code>moorDynR1\n{\n    type               moorDynR1;\n    body               floatingObject;\n    refAttachmentPt\n    (\n        (-0.1      0.1    -0.062)\n        (-0.1     -0.1    -0.062)\n        ( 0.1      0.1    -0.062)\n        ( 0.1     -0.1    -0.062)\n    );\n}\n\nmoorDynR2_pt\n{\n    type               moorDynR2;\n    body               floatingObject;\n    couplingMode       \"POINT\";\n    inputFile          \"Mooring/lines_v2_point.txt\";\n    refAttachmentPt\n    (\n        (-0.25      0.3725    -0.0652)\n        (-0.25     -0.3725    -0.0652)\n        ( 0.25      0.3725    -0.0652)\n        ( 0.25     -0.3725    -0.0652)  \n    );\n    writeMooringVTK    true;\n    vtkPrefix         \"mdv2_pt\";\n    vtkStartTime       0;\n    outerCorrector     3;\n}\n\n</code></pre>"},{"location":"rgb-mooring/#map3r","title":"map3R","text":"<pre><code>map3R\n{\n    type                map3R;\n    body                floatingObject;\n    inputFile           \"Mooring/esflOWC_4lines.map\";\n    summaryFile         \"Mooring/esflOWC_summary.map\";\n    outputFile          \"Mooring/mapForces.map\";\n    waterDepth          0.5;\n    writeMooringForces  true;\n\n    refAttachmentPt\n    (\n        (-0.1      0.1    -0.062)\n        (-0.1     -0.1    -0.062)\n        ( 0.1      0.1    -0.062)\n        ( 0.1     -0.1    -0.062)\n    );\n}\n</code></pre>"},{"location":"rgb-mooring/#moodyr","title":"moodyR","text":"<pre><code>moodyR\n{\n    type               moodyR;\n    body               floatingObject;\n\n    inputFile         \"Mooring/Liang_typeC.m\";\n    refAttachmentPt\n    (\n        (-0.25      0.3725    -0.0652)\n        (-0.25     -0.3725    -0.0652)\n        ( 0.25      0.3725    -0.0652)\n        ( 0.25     -0.3725    -0.0652)    \n    );\n}\n</code></pre>"},{"location":"rgb-mooring/#linearspringgroup","title":"linearSpringGroup","text":"<pre><code>linearSpringGroup\n{\n    type                linearSpringGroup;\n    body                box;\n\n    anchor\n    (\n        (-5.8646  5.9 0.0779)\n        (-5.8646 -5.9 0.0779)\n        ( 5.9354  5.9 0.0779)\n        ( 5.9354 -5.9 0.0779)\n    );\n\n    refAttachmentPt\n    (\n        (-0.435  0.435 0)\n        (-0.435 -0.435 0)\n        ( 0.435  0.435 0)\n        ( 0.435 -0.435 0)\n    );\n\n    numberOfSprings        4;\n\n    // identicalSprings = true, specify a scalar for stiffness, damping, restLength\n    // otherwise, specify a list of scalars for each spring (x, x, x, x)\n    identicalSprings      true;\n\n    stiffness              28;\n    damping                0;\n    restLength             7.014391404;\n\n    writeForce             true;\n    writeVTK               true;\n    compression            false; // false = no spring force when compressed\n    frelax                 0.8;\n}\n</code></pre>"},{"location":"rgb-mooring/#multiple-bodies","title":"Multiple bodies","text":"<ul> <li>Use keyword <code>bodies</code> to specify all the bodies each point in <code>refAttachmentPt</code> is attached to. Order matters. </li> <li>Support interconnected bodies (shared moorings).</li> </ul>"},{"location":"rgb-mooring/#moordynr2","title":"moorDynR2","text":"<pre><code>moorDynR2_point\n{\n    type               moorDynR2;\n    body               box1;\n\n    couplingMode       \"POINT\";\n\n    inputFile          \"Mooring/lines_v2_pointCoupling.txt\";\n    bodies             (box1 box1 box1 box1 box2 box2 box2 box2);\n\n    refAttachmentPt\n    (\n        (-0.25      0.3725    -0.0729)\n        (-0.25     -0.3725    -0.0729)\n        ( 0.25      0.3725    -0.0729)\n        ( 0.25     -0.3725    -0.0729)\n\n        (-0.25      0.3725    -0.0729)\n        (-0.25     -0.3725    -0.0729)\n        ( 0.25      0.3725    -0.0729)\n        ( 0.25     -0.3725    -0.0729)\n    );\n\n    writeMooringVTK    true;\n    vtkStartTime       0;\n    outerCorrector     3;\n}\n</code></pre>"},{"location":"rgb-mooring/#map3r_1","title":"map3R","text":"<pre><code>map3R\n{\n    type               map3R;\n    body               box1;\n\n    bodies             (box1 box1 box1 box1 box2 box2 box2 box2);\n\n    inputFile          \"Mooring/twinFB.map\";\n    summaryFile        \"Mooring/twinFB_summary.map\";\n    outputFile         \"Mooring/mapForces.map\";\n    waterDepth         0.514;\n    writeMooringForces true;\n    writeMooringVTK    true;\n    vtkStartTime       0;\n    outerCorrector     3;\n    nNodes             6; //# nodes for all lines\n    nodesPerLine       (12 12 12 12 12 12 12 12);\n\n    refAttachmentPt\n    (\n        (-0.25      0.3725    -0.0729)\n        (-0.25     -0.3725    -0.0729)\n        ( 0.25      0.3725    -0.0729)\n        ( 0.25     -0.3725    -0.0729)\n\n        (-0.25      0.3725    -0.0729)\n        (-0.25     -0.3725    -0.0729)\n        ( 0.25      0.3725    -0.0729)\n        ( 0.25     -0.3725    -0.0729)\n    );\n}\n</code></pre>"},{"location":"rgb-mooring/#moodyr_1","title":"moodyR","text":"<pre><code>moodyR\n{\n    type               moodyR;\n    body               box1;\n\n    bodies            (box1 box1 box1 box1 box2 box2 box2 box2);\n\n    inputFile         \"Mooring/Chen2022_twinFB.m\";\n    refAttachmentPt\n    (\n        (-0.25      0.3725    -0.0729)\n        (-0.25     -0.3725    -0.0729)\n        ( 0.25      0.3725    -0.0729)\n        ( 0.25     -0.3725    -0.0729)\n\n        (-0.25      0.3725    -0.0729)\n        (-0.25     -0.3725    -0.0729)\n        ( 0.25      0.3725    -0.0729)\n        ( 0.25     -0.3725    -0.0729)\n    );\n}\n</code></pre>"},{"location":"six-dof-mooring/","title":"sixDoFMooring","text":""},{"location":"six-dof-mooring/#overview","title":"Overview","text":"<p>The mooring restraint <code>libsixDoFMooring.so</code> enhances the native rigid body motion library <code>sixDoFRigidBodyMotion</code>, which solves the six-DoF motions for a rigid body according to Newton's second law. The restraint library can be simply loaded at runtime into the built-in OpenFOAM solvers <code>interFoam</code> and <code>overInterDyMFoam</code>, or into other variants (such as <code>waveFoam</code> and <code>olaFlow</code>) developed by the community. </p> <p>Thanks to MoorDyn\u2019s continuous developments, more than one mooring system instance can now be created (Lozon and Hall, 2023). This makes it possible to simulate an array of individually moored floating structures using the built-in <code>sixDoFRigidBodyMotion</code> library. To enable simulation of interconnected multiple bodies, a significant rewrite of the library is deemed necessary (Eskilsson and Palm, 2022). </p>"},{"location":"six-dof-mooring/#flowchart-coupling-moordyn-with-openfoam","title":"Flowchart coupling MoorDyn with OpenFOAM","text":"<ul> <li>The hydrodynamic forces/moments acting on the body are first calculated, which gives an initial acceleration for each new iteration or time step. </li> <li>All the restraining forces/moments are then requested from all instances of <code>sixDoFRigidBodyMotionRestraint</code> in order to update the body\u2019s acceleration. </li> <li>Once the linear and angular accelerations are obtained, the Newmark-\u03b2 integration scheme is applied to update the velocity, position, and orientation of the floating body. </li> </ul> OpenFOAM + MoorDyn via body coupling"},{"location":"six-dof-mooring/#coupling-modes","title":"Coupling modes","text":"<p>The coupling of the mooring models with floating body motion solver follows a loose-coupling approach. Two coupling modes, i.e., body coupling and point coupling, are proposed to indicate whether the body-mooring coupling is achieved via either the body\u2019s center of gravity (rotation) or the mooring lines\u2019 attachments points (fairleads) on the body. </p> <ul> <li>Body coupling</li> </ul> <p>For body coupling, the position and velocity of the floating body are passed from the body motion solver to the mooring restraint, which updates the fairlead kinematics and the mooring system states such as the mooring line nodes\u2019 position, velocity, and tension. The mooring model then calculates the total restraining forces and moments acting on the floating body by summing all mooring line contributions. The summed forces and moments are returned to the body motion solver to update the body acceleration. </p> <ul> <li>Point coupling</li> </ul> <p>For point/fairlead coupling, the mooring attachments positions (calculated from the instantaneous orientation of the floating body) are passed to the mooring models to update the mooring system states. Correspondingly, instead of the total mooring forces/moments exerting on the body, the fairlead tensions from all the mooring lines are returned from the mooring model to the rigid body restraint. The restraint then sums up the total mooring forces/moments and passes them to the motion solver to update the body motion.</p>"},{"location":"six-dof-mooring/#how-to-use-sixdofmooring","title":"How to use sixDoFMooring","text":"<ul> <li> <p>Prepare an OpenFOAM case as usual. The floating body motion can be accommodated by either deforming mesh <code>interFoam</code> or overset grid <code>overInterDyMFoam</code>.</p> </li> <li> <p>Add in <code>controlDict</code></p> </li> </ul> <pre><code>libs    (sixDoFMooring); \n</code></pre> <ul> <li> <p>Prepare a mooring input file in case subfolder \"Mooring\". For example, in <code>tutorial/sixDoF_2D/overset/background/Mooring/</code></p> <p>MoorDyn v1: <code>lines.txt</code> (filename hard-coded)</p> <p>MoorDyn v2: <code>lines_v2.txt</code></p> <p>Moody: <code>boxWu_exPoint.m</code></p> <p>MAP++: <code>esflOWC_4lines.map</code></p> </li> <li> <p>Define mooring restraints in <code>constant/dynamicMeshDict</code></p> </li> </ul> <pre><code>// Example mooring restraints available in libsixDoFMooring\n//  moorDynR1 || moorDynR2 || map3R || moodyR \n</code></pre>"},{"location":"six-dof-mooring/#map","title":"MAP++","text":"<pre><code>map3R\n{\n    sixDoFRigidBodyMotionRestraint map3R;\n    inputFile                     \"Mooring/esflOWC_4lines.map\";\n    summaryFile                   \"Mooring/esflOWC_summary.map\";\n    waterDepth                    0.5;\n    refAttachmentPt\n    (\n        (-0.1      0.1    -0.077)\n        (-0.1     -0.1    -0.077)\n        ( 0.1      0.1    -0.077)\n        ( 0.1     -0.1    -0.077)\n    );\n    numberOfSegments       20;\n    writeMooringVTK        true;\n}\n</code></pre>"},{"location":"six-dof-mooring/#moordyn","title":"MoorDyn","text":"<pre><code>// MoorDyn v1\nmoorDynR1\n{\n    sixDoFRigidBodyMotionRestraint moorDynR1;\n}\n\n// MoorDyn v2\nmoorDynR2_pt\n{\n    sixDoFRigidBodyMotionRestraint   moorDynR2;\n    inputFile          \"Mooring/lines_v2_point.txt\";\n    couplingMode       \"POINT\";\n    refAttachmentPt\n    (\n        (-0.25      0.3725    -0.0652)\n        (-0.25     -0.3725    -0.0652)\n        ( 0.25      0.3725    -0.0652)\n        ( 0.25     -0.3725    -0.0652)  \n    );\n    writeMooringVTK    true;\n    vtkPrefix          \"mdv2_pt\";\n    vtkStartTime       0;\n    outerCorrector     3;\n}\n\nmoorDynR2_bd\n{\n    sixDoFRigidBodyMotionRestraint  moorDynR2;\n    inputFile          \"Mooring/lines_v2_body.txt\";\n    couplingMode       \"BODY\";\n    writeMooringVTK    true;\n    vtkPrefix          \"mdv2_body\";\n    vtkStartTime       0;\n    outerCorrector     3;\n}\n</code></pre>"},{"location":"six-dof-mooring/#moody","title":"Moody","text":"<pre><code>moodyR\n{\n    sixDoFRigidBodyMotionRestraint moodyR;\n    inputFile              \"Mooring/boxWu_exPoint.m\";\n\n    couplingMode           \"externalPoint\"; // \"externalPoint\", \"externalRigidBody\"\n    nCouplingDof           6;\n    refAttachmentPt\n    (\n        (-0.1      0.1    -0.077)\n        (-0.1     -0.1    -0.077)\n        ( 0.1      0.1    -0.077)\n        ( 0.1     -0.1    -0.077)\n    );\n    waveKinematics         false;\n    twoD                   true;\n}\n</code></pre>"},{"location":"utilities/","title":"Useful tips","text":""},{"location":"utilities/#visualize-mooring-lines","title":"Visualize mooring lines","text":"<p>Two options are available to visualize the mooring lines simulated by MoorDyn: </p> <ol> <li>post-processing MoorDyn lines output after runtime, and </li> <li>generating VTK files during runtime. </li> </ol> <p>Detailed steps for option 1 are:</p> <ul> <li>Write VTK files 'mooringN.vtk' for mooring lines where N denotes a time sequence number.</li> <li>Prepare a vtk.series file 'mooring.vtk.series' to be loaded into Paraview.</li> <li>A Python script and example VTK files are provided in the tutorial to post-process MoorDyn output.</li> <li>The mooring tension could also be added to the VTK files, if tension output is enabled in MoorDyn input file.</li> </ul> <p>Option 2 (legacy VTK) requires certain entries in each mooring restraint's definition in <code>dynamicMeshDict</code>.</p> <ul> <li>The most important entry is <code>outerCorrector</code>, which should be consistent with <code>PIMPLE</code> settings in <code>system/fvSolution</code>.</li> <li>A VTK file is written during the last iteration of the outer loop.</li> <li>At the end of the simulation, a <code>vtk.series</code> file is generated for visualization in ParaView.</li> </ul> <pre><code>writeMooringVTK    true; // optional, default false\nvtkPrefix         \"mdv2_pt\"; // optional, default depends on the undelying mooring model\nvtkStartTime       0; // optional, default 0\nouterCorrector     3; // optional, default 3\n</code></pre> <p>Note</p> <p>Runtime generation of legacy VTK files (including vtk.series) is now supported for all mooring restraints, except for moodyR.</p> <p>MoorDyn v2 has a built-in functionality to write XML-based VTK files.</p> <p>Option 2 (XML format VTK) requires installation of <code>vtk</code> library and <code>USE_VTK=ON</code> when compiling MoorDyn v2. This generates VTK files every time step, for the moment.</p>"},{"location":"utilities/#post-process-rigid-body-motions","title":"Post-process rigid body motions","text":"<ul> <li>functionObjects</li> <li>processing script</li> </ul>"}]}