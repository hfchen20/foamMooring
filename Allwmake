#!/bin/bash

# Stop if something fails
set -e

# ----------------------------------------------------------
#   Compile the 3rd parties (modules)
# ----------------------------------------------------------
git submodule init
git submodule update --remote
cd thirdParty

# ----------------------------------------------------------
#   Compile MoorDyn v1
# ----------------------------------------------------------
echo ""
echo "compile MoorDyn v1"
echo ""

cd MoorDyn_v1/compileSO
make -j
mkdir -p $FOAM_USER_LIBBIN
# mkdir -p $FOAM_USER_LIBBIN/../include
mkdir -p $WM_PROJECT_USER_DIR/foamMooring/src/include
cp -f MoorDyn.so $FOAM_USER_LIBBIN/libmoordynv1.so
# cp -f ../MoorDyn.h $FOAM_USER_LIBBIN/../include/MoorDynv1.h
cp -f ../MoorDyn.h $WM_PROJECT_USER_DIR/foamMooring/src/include/MoorDynv1.h
cd ../..

# ----------------------------------------------------------
#   Compile MoorDyn v2
# ----------------------------------------------------------

configure_moordyn_v2 () {
    cmake -DBUILD_TESTING=OFF -DEXTERNAL_EIGEN=OFF -DFORTRAN_WRAPPER=OFF -DMATLAB_WRAPPER=OFF -DPYTHON_WRAPPER=OFF -DUSE_VTK=$1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$FOAM_USER_LIBBIN/.. ../MoorDyn
    return $?
} 

echo ""
echo "compile MoorDyn v2 with VTK"
echo ""

MOORDYN2_HAVE_VTK=true
mkdir -p MoorDyn.build
cd MoorDyn.build
set +e  # Do not exit if the configuration fail, so we can try without VTK
configure_moordyn_v2 ON
CMAKE_RESULT=$?
set -e
if [ $CMAKE_RESULT -ne 0 ]; then
    MOORDYN2_HAVE_VTK=false
    echo ""
    echo "compile MoorDyn v2 without VTK"
    echo ""
    configure_moordyn_v2 OFF
fi

make -j
make install
cd ../..

# Set MoorDyn v2 vtk flag
if [[ "$MOORDYN2_HAVE_VTK" = true ]]; then
    export FOAM_EXTRA_CXXFLAGS="$FOAM_EXTRA_CXXFLAGS -DMOORDYN2_HAVE_VTK"
fi

# ----------------------------------------------------------
#   Compile  MAP++
# ----------------------------------------------------------
echo ""
echo "SKIP compile MAP++"
echo ""
#(cd map-plus-plus/src; make && cp libmap-1.30.00.so $FOAM_USER_LIBBIN)

# ----------------------------------------------------------
#   Copy precompiled Moody library
# ----------------------------------------------------------
cp moody-2.0.1-Linux/lib/libmoody.so $FOAM_USER_LIBBIN

# ----------------------------------------------------------
#   Compile sixDoFMooringRestraints
# ----------------------------------------------------------
echo ""
echo "compile sixDoF mooring restraints"
echo ""
( cd src/sixDoFMooringRestraints && wmake libso )

# ----------------------------------------------------------
#   Compile rigidBodyMooringRestraints
# ----------------------------------------------------------
echo ""
echo "compile rigid body mooring restraints"
echo ""
( cd src/rigidBodyMooringRestraints && wmake libso )

echo ""
echo " Compilation done!"
echo ""
